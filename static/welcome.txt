Welcome ! Please enjoy this custom made package !

Here's some info about what you'll you'll find in the package :

FUNCTIONS :
    - OK, FAIL, WARNING, CLEAR ==> color printing
    - dico (is a dictionary with => true if word exists)

DECORATORS :
    - @time_me
    - @memoize_me
    - @try_me (prints fail or success after checking if function raises exception or not)
    - @jam_me (intercepts everything a function prints) (optional argument:jammer)
    - @task_me (gives points to a progress bar on each call of the function)

VARIABLES : 

    - JAMMER : the default print jammer --> JAMMER.activate() / JAMMER.print() / JAMMER.deactivate() / JAMMER.reset()

    pi = math.pi
    G = 6.674_30e-11
    c = 299_792_458
    #QUANTUM MECANICS
    h = 6.626_070_15e-34
    h_bar = h/2/pi
    #ATOMS AND PARTICLES
    e = 1.602_176_634e-19
    m_e = 9.109_383_70e-31
    m_p = 1.672_621_923e-27
    m_n = 1.674_927_498e-27
    a_zero = a_bohr = 5.291_772_109e-11
    #ELECTROMAG
    mu_zero = 1.256_637_062_12e-6
    epsilon_zero = 1/mu_zero/c/c
    k_b = 1.380_649e-23
    #CHEMISTRY
    N_a = N_avogadro = 6.022_140_76e23
    F = N_a*e
    R = N_a*k_b

MODULES :


Style :
  - Style(settings).set()=>print character
  - Style(settings)("string")=>changes string color and resets color of the rest

ANSI :
  - contains usefull ANSI caracters (tu navigate through terminal)

Dictionary :
  - dico => initilized dictionnary (ask 'contains')
  - Dictionary(filename)

Jammer :
  - cf JAMMER

Task :
  - Task(bar,value).complete() increments progressBar

ProgressBar :
  - ProgressBar().update() =>display progressBar

ProgressIterator :
  - for i in ProgressIterator(iterable):
      ...
  
ChiffreSOlver / LetterSolver :
  - french TV game 'Des chiffres et des lettres' solvers, use them with import shadok.shell (launches shell automatically)


